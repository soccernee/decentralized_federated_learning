# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import leader_pb2 as leader__pb2
import node_pb2 as node__pb2


class LeaderExchangeStub(object):
    """
    LeaderExchange: the message exchange service definition for the leader to connect with the nodes.
    These functions are received by the Nodes themselves.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Heartbeat = channel.unary_unary(
                '/LeaderExchange/Heartbeat',
                request_serializer=leader__pb2.HeartbeatRequest.SerializeToString,
                response_deserializer=leader__pb2.HeartbeatResponse.FromString,
                )
        self.DistributeModelWeights = channel.unary_unary(
                '/LeaderExchange/DistributeModelWeights',
                request_serializer=node__pb2.ModelRequest.SerializeToString,
                response_deserializer=node__pb2.ModelResponse.FromString,
                )


class LeaderExchangeServicer(object):
    """
    LeaderExchange: the message exchange service definition for the leader to connect with the nodes.
    These functions are received by the Nodes themselves.
    """

    def Heartbeat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DistributeModelWeights(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LeaderExchangeServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Heartbeat': grpc.unary_unary_rpc_method_handler(
                    servicer.Heartbeat,
                    request_deserializer=leader__pb2.HeartbeatRequest.FromString,
                    response_serializer=leader__pb2.HeartbeatResponse.SerializeToString,
            ),
            'DistributeModelWeights': grpc.unary_unary_rpc_method_handler(
                    servicer.DistributeModelWeights,
                    request_deserializer=node__pb2.ModelRequest.FromString,
                    response_serializer=node__pb2.ModelResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'LeaderExchange', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class LeaderExchange(object):
    """
    LeaderExchange: the message exchange service definition for the leader to connect with the nodes.
    These functions are received by the Nodes themselves.
    """

    @staticmethod
    def Heartbeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/LeaderExchange/Heartbeat',
            leader__pb2.HeartbeatRequest.SerializeToString,
            leader__pb2.HeartbeatResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DistributeModelWeights(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/LeaderExchange/DistributeModelWeights',
            node__pb2.ModelRequest.SerializeToString,
            node__pb2.ModelResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
